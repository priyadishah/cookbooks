parameters:
  - name: stageName
    type: string
    default: none
  - name: stageDisplayname
    type: string
    default: none
  - name: runStage
    type: boolean
    default: true
  # - name: dependsOn
  #   default: []
  - name: jobName
    type: string
    default: none
  - name: jobDisplayname
    type: string
    default: none
  - name: vmImage
    type: string
    default: windows-2022
  - name: jobcondition
    type: string
    default: ''
  - name: jobDemand
    type: string
    default: ''

stages:
  - stage: ${{ parameters.stageName }}
    condition: ${{ parameters.runStage }}
    dependsOn: []
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      timeoutInMinutes: 0
      cancelTimeoutInMinutes: 1
      condition: ${{ parameters. jobcondition}}
      displayName: ${{ parameters.jobDisplayname }}

      variables:
        TemplateS3Namespace: '/image-cd-pipeline'

      pool:
        vmImage: ${{ parameters.vmImage }}
        # demands: ${{ parameters.jobDemand }}

      steps:
      - download: _BuildCloudAccountIdArtefacts
      - download: _BuildImageReleaseArtefacts
      - checkout: self
      - checkout: _LansaAzureQuickstartTemplates
      - checkout: _CelestialSystemAzureQuickstartTemplates
      # - checkout: _Robe070Cookbooks

      - task: PowerShell@2
        name: Gate
        displayName: 'Artifact Check: Set Gate Variable'
        inputs:
          targetType: filePath
          filePath: '$(System.DefaultWorkingDirectory)/cookbooks/scripts/azure_set_gate_variable_cloud_account_id.ps1'
          arguments: '-Version "$(System.JobDisplayName)" -osName "Windows Server 2019"'

      - powershell: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled)"
          Write-Host "Gate.Version: $(Gate.Version)"
          Write-Host "Gate.VersionClean: $(Gate.VersionClean)"
          Write-Host "Gate.ImageUrl: $(Gate.ImageUrl)"
          Write-Host "Gate.osName: $(Gate.osName)"
          Write-Host "Gate.Sku: $(Gate.Sku)"
        displayName: 'Artifact Check: Output Gate Variable'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AzurePowerShell@5 
        displayName: 'Delete Resource Group'
        inputs:
          azureSubscription: 'Azure Baking Images'
          ScriptType: InlineScript
          Inline: |
            Write-Host "Deleting Resource Group $(Gate.StackName)"
            Remove-AzResourceGroup -Name $(Gate.StackName) -Force
          errorActionPreference: silentlyContinue
          azurePowerShellVersion: LatestVersion
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy ARM Template '
        inputs:
          azureResourceManagerConnection: 'Azure Baking Images'
          subscriptionId: $(SubscriptionId)
          resourceGroupName: '$(Gate.StackName)'
          location: 'Australia East'
          csmFile: '$(System.DefaultWorkingDirectory)/azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json'
          overrideParameters: '-osName "$(Gate.osName)" -lansaVersion "V15 GA" -imageId "$(Gate.ImageUrl)" -imageSource "Custom" -msiURL $(msiURLv15) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "support/scalable"'
          deploymentName: CustomTestTemplate
          deploymentOutputs: deploymentOutput
          addSpnToEnvironment: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: maikvandergaag.maikvandergaag-azurergtag.azurergtag.azurergtag@1
        displayName: 'Azure Resource Group Tagging'
        inputs:
          ConnectedServiceName: 'Azure Baking Images'
          ResourceGroupName: '$(Gate.StackName)'
          Key: Usage
          Value: 'test-temp'
        continueOnError: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - powershell: |
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        displayName: 'Print Deployment Output'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
  
      - task: PowerShell@2
        displayName: 'Test ARM Deployment: URL Tests'
        inputs:
          targetType: filePath
          filePath: './$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1'
          arguments: '-deploymentOutput ''$(deploymentOutput)'''
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Delete Resource Group'
        inputs:
          azureResourceManagerConnection: 
          subscriptionId: $(SubscriptionId)
          action: DeleteRG
          resourceGroupName: '$(Gate.StackName)'
        continueOnError: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240