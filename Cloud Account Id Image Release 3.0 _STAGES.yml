parameters:
  - name: stageName
    type: string
    default: none
  - name: stageDisplayname
    type: string
    default: none
  - name: dependsOn
    default: []
  - name: jobName
    type: string
    default: none
  - name: jobDisplayname
    type: string
    default: none
  - name: vmImage
    type: string
    default: none
  - name: deploySQLservertaskname
    type: string
    default: none

stages:
  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: PowerShell@2
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          targetType: filePath
          filePath: './$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_set_gate_variable.ps1'
          arguments: '-Version "$(System.JobDisplayName)" -osName "Windows Server 2019"'

        #Your build pipeline references an undefined variable named ‘Gate.IsEnabled’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.Version’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.VersionClean’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.ImageUrl’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.osName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.Sku’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
      - powershell: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled)"
          Write-Host "Gate.Version: $(Gate.Version)"
          Write-Host "Gate.VersionClean: $(Gate.VersionClean)"
          Write-Host "Gate.ImageUrl: $(Gate.ImageUrl)"
          Write-Host "Gate.osName: $(Gate.osName)"
          Write-Host "Gate.Sku: $(Gate.Sku)"
        
        displayName: 'Artifact Check : Output Gate Variable'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      #Your build pipeline references an undefined variable named ‘Gate.StackName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
      #Your build pipeline references an undefined variable named ‘Gate.StackName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
      - task: AzurePowerShell@5
        displayName: 'Delete Resource Group'
        inputs:
          azureSubscription: 
          ScriptType: InlineScript
          Inline: |
            Write-Host "Deleting Resource Group $(Gate.StackName)"
            Remove-AzResourceGroup -Name $(Gate.StackName) -Force
            errorActionPreference: silentlyContinue
            azurePowerShellVersion: LatestVersion
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

        #Your build pipeline references an undefined variable named ‘Gate.StackName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.osName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.ImageUrl’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘msiURLv15’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.VersionClean’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘certificateBase64Encoded’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘certificatePassword’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘databaseLogin’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘databaseLoginPassword’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘adminUsername’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘adminPassword’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘webUsername’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘webPassword’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
      
      - ${{ if or(eq(parameters['stageName'], 'v13sp2'), eq(parameters['stageName'], 'v13sp2-scalable')) }}:
        #Your build pipeline references an undefined variable named ‘Gate.StackName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.VersionClean’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: 'Deploy SQL Server'
          inputs:
            azureResourceManagerConnection: 'Azure Baking Images'
            subscriptionId: '739c4e86-bd75-4910-8d6e-d7eb23ab94f3'
            resourceGroupName: '$(Gate.StackName)'
            location: 'Australia East'
            csmFile: '$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/DatabaseDeploymentTemplates/sqlServerTemplate.json'
            csmParametersFile: '$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/DatabaseDeploymentTemplates/sqlServerParameters.json'
            overrideParameters: '-diagnosticsStorageAccountName "$(Gate.VersionClean)"'
            deploymentName: mssqls1Test
            deploymentOutputs: mssqlsdb1deploymentOutput
            addSpnToEnvironment: true
          condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

        #Your build pipeline references an undefined variable named ‘mssqlsdb1deploymentOutput’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘mssqlsdb1deploymentOutput’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.StackName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        - task: AzurePowerShell@5
          displayName: 'Azure PowerShell script: GetServerIP'
          inputs:
            azureSubscription: 'Azure Baking Images'
            ScriptType: InlineScript
            Inline: |
              # Print the Deployment Output
              Write-Host "$(mssqlsdb1deploymentOutput)" | out-default | Write-Verbose
              $deploymentOutput =ConvertFrom-Json '$(mssqlsdb1deploymentOutput)'
              $pipName = $deploymentOutput.publicIpAddressName.value
              $output = Get-AzPublicIpAddress -Name $pipName -ResourceGroupName '$(Gate.StackName)'
              $vmIP = $output.IpAddress
              Write-Host "##vso[task.setvariable variable=pip;isOutput=true]$vmIP" | Out-Default | Write-Verbose 
              azurePowerShellVersion: LatestVersion
          condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

        #Your build pipeline references an undefined variable named ‘Gate.StackName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.osName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.ImageUrl’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘msiURLv132’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.VersionClean’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘certificateBase64Encoded’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘certificatePassword’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘sqlDBOutput.pip’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘databaseLoginPassword’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘adminUsername’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘adminPassword’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘webUsername’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘webPassword’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: 'Deploy LANSA MSI'
          inputs:
            azureResourceManagerConnection: 
            subscriptionId: '739c4e86-bd75-4910-8d6e-d7eb23ab94f3'
            resourceGroupName: '$(Gate.StackName)'
            location: 'Australia East'
            csmFile: '$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json'
            overrideParameters: '-osName "$(Gate.osName)" -lansaVersion "V15 GA" -imageId "$(Gate.ImageUrl)" -imageSource "Custom" -msiURL $(msiURLv132) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)" -databaseNewOrExisting "existing" -databaseType "MSSQLS" -databaseServerName "$(sqlDBOutput.pip)" -databaseName "lansa" -databaseLogin "lansa" -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "debug/paas-v13sp2"'
            deploymentName: CustomTestTemplate
            deploymentOutputs: deploymentOutput
            addSpnToEnvironment: true
          condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      
      - ${{ else }}:
        #Your build pipeline references an undefined variable named ‘Gate.StackName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.osName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.ImageUrl’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘msiURLv142’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘Gate.VersionClean’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘certificateBase64Encoded’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘certificatePassword’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘databaseLogin’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘databaseLoginPassword’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘adminUsername’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘adminPassword’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘webUsername’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        #Your build pipeline references an undefined variable named ‘webPassword’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: 'Deploy ARM Template '
          inputs:
            azureResourceManagerConnection: 'Azure Baking Images'
            subscriptionId: '739c4e86-bd75-4910-8d6e-d7eb23ab94f3'
            resourceGroupName: '$(Gate.StackName)'
            location: 'Australia East'
            csmFile: '$(System.DefaultWorkingDirectory)/_lansa_azure-quickstart-templates/lansa-vmss-windows-autoscale-sql-database/mainTemplate.json'
            overrideParameters: '-osName "$(Gate.osName)" -lansaVersion "V15 GA" -imageId "$(Gate.ImageUrl)" -imageSource "Custom" -msiURL $(msiURLv142) -stackName "$(Gate.VersionClean)" -certificateBase64Encoded "$(certificateBase64Encoded)" -certificatePassword "$(certificatePassword)" -databaseLogin "$(databaseLogin)" -databaseLoginPassword "$(databaseLoginPassword)" -adminUsername "$(adminUsername)" -adminPassword "$(adminPassword)" -webUsername "$(webUsername)" -webPassword "$(webPassword)" -gitBranch "debug/paas"'
            deploymentName: CustomTestTemplate
            deploymentOutputs: deploymentOutput
            addSpnToEnvironment: true
          condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      #Your build pipeline references an undefined variable named ‘Gate.StackName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972

      - task: maikvandergaag.maikvandergaag-azurergtag.azurergtag.azurergtag@1
        displayName: 'Azure Resource Group Tagging'
        inputs:
          ConnectedServiceName: 'Azure Baking Images'
          ResourceGroupName: '$(Gate.StackName)'
          Key: Usage
          Value: 'test-temp'
        continueOnError: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      #Your build pipeline references an undefined variable named ‘deploymentOutput’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
      - powershell: |
          # Print the Deployment Output
          Write-Host "$(deploymentOutput)" | out-default | Write-Verbose
        displayName: 'Print Deployment Output'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      #Your build pipeline references an undefined variable named ‘deploymentOutput’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
      - task: PowerShell@2
        displayName: 'Test ARM Deployment : URL Tests'
        inputs:
          targetType: filePath
          filePath: './$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/azure_url_tests.ps1'
          arguments: '-deploymentOutput ''$(deploymentOutput)'''
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      #Your build pipeline references an undefined variable named ‘Gate.StackName’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Delete Resource Group'
        inputs:
          azureResourceManagerConnection: 
          subscriptionId: '739c4e86-bd75-4910-8d6e-d7eb23ab94f3'
          action: DeleteRG
          resourceGroupName: '$(Gate.StackName)'
        continueOnError: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240

  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-BaseImageName ''$(System.JobDisplayName)'' -stackname ''$(System.StageDisplayName)-$(System.JobDisplayName)'''
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/SetGateVariableCloudAccountId.ps1'

      - pwsh: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.stack:$(Gate.stack)"| Out-Default
          
          displayName: 'Artifact Check : Output Gate Variable'
          condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete previous Failed Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1

        displayName: 'Deploy AWS template'
        variables:
          TemplateS3Namespace: '/image-cd-pipeline'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          stackName: '$(Gate.stack)'
          templateSource: s3
          s3BucketName: lansa
          s3ObjectKey: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
          templateParametersSource: inline
          templateParameters: |
          [{
              "ParameterKey": "$(DBPasswordKey)",
              "ParameterValue": "$(DBPasswordValue)"
          }, {
              "ParameterKey": "$(WebPasswordKey)",
              "ParameterValue": "$(WebPasswordValue)"
          }, {
              "ParameterKey": "$(KeyNameKey)",    
              "ParameterValue": "$(KeyNameValue)"
          }, {
              "ParameterKey": "$(RemoteAccessLocationKey)",   
              "ParameterValue": "$(RemoteAccessLocationValue)"
          }, {
              "ParameterKey": "ImageSource",   
              "ParameterValue": "Custom"
          }, {
              "ParameterKey": "AMIId",   
              "ParameterValue": "$(Gate.ImageID)"
          }, {
              "ParameterKey": "LansaVersion",   
              "ParameterValue": "$(lansaVersion)"
          },  {
              "ParameterKey": "11WebserverOSVersion",   
              "ParameterValue": "$(WebserverOSLatestVersionValue)"
          }, {
              "ParameterKey": "10LansaGitRepoBranch",   
              "ParameterValue": "$(CookbooksBranch)"
          },  {
              "ParameterKey": "TemplateS3Namespace",   
              "ParameterValue": "$(TemplateS3Namespace)"
          }, {
              "ParameterKey": "$(LansaMSIKey)",   
              "ParameterValue": "$(msiURLLatest)"
          }, {
              "ParameterKey": "CurrentVPC",   
              "ParameterValue": "$(CurrentVPC)"
          }, {
              "ParameterKey": "AvailabilityZones",   
              "ParameterValue": "$(AvailabilityZones)"
          }, {
              "ParameterKey": "NumberOfAZs",   
              "ParameterValue": "$(NumberOfAZs)"
          }, {
              "ParameterKey": "DBSubnetGroupName",   
              "ParameterValue": "$(DBSubnetGroupName)"
          }, {
              "ParameterKey": "ELBSubnetIds",   
              "ParameterValue": "$(ELBSubnetIds)"
          }, {
              "ParameterKey": "03DBUsername",   
              "ParameterValue": "$(03DBUsername)"
          }
          ]
          onFailure: 'DO_NOTHING'
          disableRollback: true
          outputVariable: deploymentOutput
          captureStackOutputs: asJSON
          captureAsSecuredVars: false
          timeoutInMins: 120
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Print Deployment Output'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/PrintDeploymentOutput.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
          condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
          ignoreLASTEXITCODE: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240

  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-BaseImageName ''$(System.JobDisplayName)'' -stackname ''$(System.StageDisplayName)-$(System.JobDisplayName)'''
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/SetGateVariableCloudAccountId.ps1'

      - pwsh: |
        # Print the Gate variables.
        Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.stack:$(Gate.stack)"| Out-Default
        
        displayName: 'Artifact Check : Output Gate Variable'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete previous Failed Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
        displayName: 'Deploy AWS template'
        variables:
          TemplateS3Namespace: '/image-cd-pipeline'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          stackName: '$(Gate.stack)'
          templateSource: s3
          s3BucketName: lansa
          s3ObjectKey: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
          templateParametersSource: inline
          templateParameters: |
          [{
              "ParameterKey": "$(DBPasswordKey)",
              "ParameterValue": "$(DBPasswordValue)"
          }, {
              "ParameterKey": "$(WebPasswordKey)",
              "ParameterValue": "$(WebPasswordValue)"
          }, {
              "ParameterKey": "$(KeyNameKey)",    
              "ParameterValue": "$(KeyNameValue)"
          }, {
              "ParameterKey": "$(RemoteAccessLocationKey)",   
              "ParameterValue": "$(RemoteAccessLocationValue)"
          }, {
              "ParameterKey": "ImageSource",   
              "ParameterValue": "Custom"
          }, {
              "ParameterKey": "AMIId",   
              "ParameterValue": "$(Gate.ImageID)"
          }, {
              "ParameterKey": "LansaVersion",   
              "ParameterValue": "$(lansaVersionPrevious)"
          },  {
              "ParameterKey": "11WebserverOSVersion",   
              "ParameterValue": "$(WebserverOSLatestVersionValue)"
          }, {
              "ParameterKey": "10LansaGitRepoBranch",   
              "ParameterValue": "$(CookbooksBranch)"
          },  {
              "ParameterKey": "TemplateS3Namespace",   
              "ParameterValue": "$(TemplateS3Namespace)"
          }, {
              "ParameterKey": "$(LansaMSIKey)",   
              "ParameterValue": "$(msiURLPrevious)"
          }, {
              "ParameterKey": "CurrentVPC",   
              "ParameterValue": "$(CurrentVPC)"
          }, {
              "ParameterKey": "AvailabilityZones",   
              "ParameterValue": "$(AvailabilityZones)"
          }, {
              "ParameterKey": "NumberOfAZs",   
              "ParameterValue": "$(NumberOfAZs)"
          }, {
              "ParameterKey": "DBSubnetGroupName",   
              "ParameterValue": "$(DBSubnetGroupName)"
          }, {
              "ParameterKey": "ELBSubnetIds",   
              "ParameterValue": "$(ELBSubnetIds)"
          }, {
              "ParameterKey": "03DBUsername",   
              "ParameterValue": "$(03DBUsername)"
          }
          ]
          onFailure: 'DO_NOTHING'
          disableRollback: true
          outputVariable: deploymentOutput
          captureStackOutputs: asJSON
          captureAsSecuredVars: false
          timeoutInMins: 120
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Print Deployment Output'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/PrintDeploymentOutput.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
          ignoreLASTEXITCODE: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240

  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-BaseImageName ''$(System.JobDisplayName)'' -stackname ''$(System.StageDisplayName)-$(System.JobDisplayName)'''
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/SetGateVariableCloudAccountId.ps1'

      - pwsh: |
        # Print the Gate variables.
        Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.stack:$(Gate.stack)"| Out-Default
        
        displayName: 'Artifact Check : Output Gate Variable'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete previous Failed Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
        displayName: 'Deploy AWS template'
        variables:
          TemplateS3Namespace: '/image-cd-pipeline'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          stackName: '$(Gate.stack)'
          templateSource: s3
          s3BucketName: lansa
          s3ObjectKey: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
          templateParametersSource: inline
          templateParameters: |
          [{
              "ParameterKey": "$(DBPasswordKey)",
              "ParameterValue": "$(DBPasswordValue)"
          }, {
              "ParameterKey": "$(WebPasswordKey)",
              "ParameterValue": "$(WebPasswordValue)"
          }, {
              "ParameterKey": "$(KeyNameKey)",    
              "ParameterValue": "$(KeyNameValue)"
          }, {
              "ParameterKey": "$(RemoteAccessLocationKey)",   
              "ParameterValue": "$(RemoteAccessLocationValue)"
          }, {
              "ParameterKey": "ImageSource",   
              "ParameterValue": "Custom"
          }, {
              "ParameterKey": "AMIId",   
              "ParameterValue": "$(Gate.ImageID)"
          }, {
              "ParameterKey": "LansaVersion",   
              "ParameterValue": "$(lansaVersion)"
          },  {
              "ParameterKey": "11WebserverOSVersion",   
              "ParameterValue": "$(WebserverOSLatestVersionValue)"
          }, {
              "ParameterKey": "10LansaGitRepoBranch",   
              "ParameterValue": "$(CookbooksBranch)"
          },  {
              "ParameterKey": "TemplateS3Namespace",   
              "ParameterValue": "$(TemplateS3Namespace)"
          }, {
              "ParameterKey": "$(LansaMSIKey)",   
              "ParameterValue": "$(msiURLLatest)"
          }, {
              "ParameterKey": "CurrentVPC",   
              "ParameterValue": "$(CurrentVPC)"
          }, {
              "ParameterKey": "AvailabilityZones",   
              "ParameterValue": "$(AvailabilityZones)"
          }, {
              "ParameterKey": "NumberOfAZs",   
              "ParameterValue": "$(NumberOfAZs)"
          }, {
              "ParameterKey": "DBSubnetGroupName",   
              "ParameterValue": "$(DBSubnetGroupName)"
          }, {
              "ParameterKey": "ELBSubnetIds",   
              "ParameterValue": "$(ELBSubnetIds)"
          }, {
              "ParameterKey": "03DBUsername",   
              "ParameterValue": "$(03DBUsername)"
          }
          ]
          onFailure: 'DO_NOTHING'
          disableRollback: true
          outputVariable: deploymentOutput
          captureStackOutputs: asJSON
          captureAsSecuredVars: false
          timeoutInMins: 120
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Print Deployment Output'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/PrintDeploymentOutput.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
          ignoreLASTEXITCODE: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240

  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-BaseImageName ''$(System.JobDisplayName)'' -stackname ''$(System.StageDisplayName)-$(System.JobDisplayName)'''
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/SetGateVariableCloudAccountId.ps1'

      - pwsh: |
        # Print the Gate variables.
        Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.stack:$(Gate.stack)"| Out-Default
        
        displayName: 'Artifact Check : Output Gate Variable'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete previous Failed Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
        displayName: 'Deploy AWS template'
        variables:
          TemplateS3Namespace: '/image-cd-pipeline'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          stackName: '$(Gate.stack)'
          templateSource: s3
          s3BucketName: lansa
          s3ObjectKey: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
          templateParametersSource: inline
          templateParameters: |
          [{
              "ParameterKey": "$(DBPasswordKey)",
              "ParameterValue": "$(DBPasswordValue)"
          }, {
              "ParameterKey": "$(WebPasswordKey)",
              "ParameterValue": "$(WebPasswordValue)"
          }, {
              "ParameterKey": "$(KeyNameKey)",    
              "ParameterValue": "$(KeyNameValue)"
          }, {
              "ParameterKey": "$(RemoteAccessLocationKey)",   
              "ParameterValue": "$(RemoteAccessLocationValue)"
          }, {
              "ParameterKey": "ImageSource",   
              "ParameterValue": "Custom"
          }, {
              "ParameterKey": "AMIId",   
              "ParameterValue": "$(Gate.ImageID)"
          }, {
              "ParameterKey": "LansaVersion",   
              "ParameterValue": "$(lansaVersion)"
          },  {
              "ParameterKey": "11WebserverOSVersion",   
              "ParameterValue": "$(WebserverOSLatestVersionValue)"
          }, {
              "ParameterKey": "10LansaGitRepoBranch",   
              "ParameterValue": "$(CookbooksBranch)"
          },  {
              "ParameterKey": "TemplateS3Namespace",   
              "ParameterValue": "$(TemplateS3Namespace)"
          }, {
              "ParameterKey": "$(LansaMSIKey)",   
              "ParameterValue": "$(msiURLLatest)"
          }, {
              "ParameterKey": "CurrentVPC",   
              "ParameterValue": "$(CurrentVPC)"
          }, {
              "ParameterKey": "AvailabilityZones",   
              "ParameterValue": "$(AvailabilityZones)"
          }, {
              "ParameterKey": "NumberOfAZs",   
              "ParameterValue": "$(NumberOfAZs)"
          }, {
              "ParameterKey": "DBSubnetGroupName",   
              "ParameterValue": "$(DBSubnetGroupName)"
          }, {
              "ParameterKey": "ELBSubnetIds",   
              "ParameterValue": "$(ELBSubnetIds)"
          }, {
              "ParameterKey": "03DBUsername",   
              "ParameterValue": "$(03DBUsername)"
          }
          ]
          onFailure: 'DO_NOTHING'
          disableRollback: true
          outputVariable: deploymentOutput
          captureStackOutputs: asJSON
          captureAsSecuredVars: false
          timeoutInMins: 120
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Print Deployment Output'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/PrintDeploymentOutput.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
          ignoreLASTEXITCODE: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240
  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-BaseImageName ''$(System.JobDisplayName)'' -stackname ''$(System.StageDisplayName)-$(System.JobDisplayName)'''
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/SetGateVariableCloudAccountId.ps1'

      - pwsh: |
        # Print the Gate variables.
        Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.stack:$(Gate.stack)"| Out-Default
        
        displayName: 'Artifact Check : Output Gate Variable'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete previous Failed Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
        displayName: 'Deploy AWS template'
        variables:
          TemplateS3Namespace: '/image-cd-pipeline'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          stackName: '$(Gate.stack)'
          templateSource: s3
          s3BucketName: lansa
          s3ObjectKey: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
          templateParametersSource: inline
          templateParameters: |
          [{
              "ParameterKey": "$(DBPasswordKey)",
              "ParameterValue": "$(DBPasswordValue)"
          }, {
              "ParameterKey": "$(WebPasswordKey)",
              "ParameterValue": "$(WebPasswordValue)"
          }, {
              "ParameterKey": "$(KeyNameKey)",    
              "ParameterValue": "$(KeyNameValue)"
          }, {
              "ParameterKey": "$(RemoteAccessLocationKey)",   
              "ParameterValue": "$(RemoteAccessLocationValue)"
          }, {
              "ParameterKey": "ImageSource",   
              "ParameterValue": "Custom"
          }, {
              "ParameterKey": "AMIId",   
              "ParameterValue": "$(Gate.ImageID)"
          }, {
              "ParameterKey": "LansaVersion",   
              "ParameterValue": "$(lansaVersionPrevious)"
          },  {
              "ParameterKey": "11WebserverOSVersion",   
              "ParameterValue": "$(WebserverOSLatestVersionValue)"
          }, {
              "ParameterKey": "10LansaGitRepoBranch",   
              "ParameterValue": "$(CookbooksBranch)"
          },  {
              "ParameterKey": "TemplateS3Namespace",   
              "ParameterValue": "$(TemplateS3Namespace)"
          }, {
              "ParameterKey": "$(LansaMSIKey)",   
              "ParameterValue": "$(msiURLPrevious)"
          }, {
              "ParameterKey": "CurrentVPC",   
              "ParameterValue": "$(CurrentVPC)"
          }, {
              "ParameterKey": "AvailabilityZones",   
              "ParameterValue": "$(AvailabilityZones)"
          }, {
              "ParameterKey": "NumberOfAZs",   
              "ParameterValue": "$(NumberOfAZs)"
          }, {
              "ParameterKey": "DBSubnetGroupName",   
              "ParameterValue": "$(DBSubnetGroupName)"
          }, {
              "ParameterKey": "ELBSubnetIds",   
              "ParameterValue": "$(ELBSubnetIds)"
          }, {
              "ParameterKey": "03DBUsername",   
              "ParameterValue": "$(03DBUsername)"
          }
          ]
          onFailure: 'DO_NOTHING'
          disableRollback: true
          outputVariable: deploymentOutput
          captureStackOutputs: asJSON
          captureAsSecuredVars: false
          timeoutInMins: 120
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Print Deployment Output'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/PrintDeploymentOutput.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
          ignoreLASTEXITCODE: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240

  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-BaseImageName ''$(System.JobDisplayName)'' -stackname ''$(System.StageDisplayName)-$(System.JobDisplayName)'''
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/SetGateVariableCloudAccountId.ps1'

      - pwsh: |
        # Print the Gate variables.
        Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.stack:$(Gate.stack)"| Out-Default
        
        displayName: 'Artifact Check : Output Gate Variable'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete previous Failed Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
        displayName: 'Deploy AWS template'
        variables:
          TemplateS3Namespace: '/image-cd-pipeline'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          stackName: '$(Gate.stack)'
          templateSource: s3
          s3BucketName: lansa
          s3ObjectKey: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
          templateParametersSource: inline
          templateParameters: |
          [{
              "ParameterKey": "$(DBPasswordKey)",
              "ParameterValue": "$(DBPasswordValue)"
          }, {
              "ParameterKey": "$(WebPasswordKey)",
              "ParameterValue": "$(WebPasswordValue)"
          }, {
              "ParameterKey": "$(KeyNameKey)",    
              "ParameterValue": "$(KeyNameValue)"
          }, {
              "ParameterKey": "$(RemoteAccessLocationKey)",   
              "ParameterValue": "$(RemoteAccessLocationValue)"
          }, {
              "ParameterKey": "ImageSource",   
              "ParameterValue": "Custom"
          }, {
              "ParameterKey": "AMIId",   
              "ParameterValue": "$(Gate.ImageID)"
          }, {
              "ParameterKey": "LansaVersion",   
              "ParameterValue": "$(lansaVersion)"
          },  {
              "ParameterKey": "11WebserverOSVersion",   
              "ParameterValue": "$(WebserverOSLatestVersionValue)"
          }, {
              "ParameterKey": "10LansaGitRepoBranch",   
              "ParameterValue": "$(CookbooksBranch)"
          },  {
              "ParameterKey": "TemplateS3Namespace",   
              "ParameterValue": "$(TemplateS3Namespace)"
          }, {
              "ParameterKey": "$(LansaMSIKey)",   
              "ParameterValue": "$(msiURLLatest)"
          }, {
              "ParameterKey": "CurrentVPC",   
              "ParameterValue": "$(CurrentVPC)"
          }, {
              "ParameterKey": "AvailabilityZones",   
              "ParameterValue": "$(AvailabilityZones)"
          }, {
              "ParameterKey": "NumberOfAZs",   
              "ParameterValue": "$(NumberOfAZs)"
          }, {
              "ParameterKey": "DBSubnetGroupName",   
              "ParameterValue": "$(DBSubnetGroupName)"
          }, {
              "ParameterKey": "ELBSubnetIds",   
              "ParameterValue": "$(ELBSubnetIds)"
          }, {
              "ParameterKey": "03DBUsername",   
              "ParameterValue": "$(03DBUsername)"
          }
          ]
          onFailure: 'DO_NOTHING'
          disableRollback: true
          outputVariable: deploymentOutput
          captureStackOutputs: asJSON
          captureAsSecuredVars: false
          timeoutInMins: 120
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Print Deployment Output'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/PrintDeploymentOutput.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
          ignoreLASTEXITCODE: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240
