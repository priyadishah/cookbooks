parameters:
  - name: stageName
    type: string
    default: none
  - name: stageDisplayname
    type: string
    default: none
  - name: dependsOn
    default: []
  - name: jobName
    type: string
    default: none
  - name: jobDisplayname
    type: string
    default: none
  - name: vmImage
    type: string
    default: none
  - name: deploySQLservertaskname
    type: string
    default: none

stages:
  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-BaseImageName ''$(System.JobDisplayName)'' -stackname ''$(System.StageDisplayName)-$(System.JobDisplayName)'''
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/SetGateVariableCloudAccountId.ps1'

      - pwsh: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.stack:$(Gate.stack)"| Out-Default
          
          displayName: 'Artifact Check : Output Gate Variable'
          condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete previous Failed Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1

        displayName: 'Deploy AWS template'
        variables:
          TemplateS3Namespace: '/image-cd-pipeline'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          stackName: '$(Gate.stack)'
          templateSource: s3
          s3BucketName: lansa
          s3ObjectKey: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
          templateParametersSource: inline
          templateParameters: |
          [{
              "ParameterKey": "$(DBPasswordKey)",
              "ParameterValue": "$(DBPasswordValue)"
          }, {
              "ParameterKey": "$(WebPasswordKey)",
              "ParameterValue": "$(WebPasswordValue)"
          }, {
              "ParameterKey": "$(KeyNameKey)",    
              "ParameterValue": "$(KeyNameValue)"
          }, {
              "ParameterKey": "$(RemoteAccessLocationKey)",   
              "ParameterValue": "$(RemoteAccessLocationValue)"
          }, {
              "ParameterKey": "ImageSource",   
              "ParameterValue": "Custom"
          }, {
              "ParameterKey": "AMIId",   
              "ParameterValue": "$(Gate.ImageID)"
          }, {
              "ParameterKey": "LansaVersion",   
              "ParameterValue": "$(lansaVersion)"
          },  {
              "ParameterKey": "11WebserverOSVersion",   
              "ParameterValue": "$(WebserverOSLatestVersionValue)"
          }, {
              "ParameterKey": "10LansaGitRepoBranch",   
              "ParameterValue": "$(CookbooksBranch)"
          },  {
              "ParameterKey": "TemplateS3Namespace",   
              "ParameterValue": "$(TemplateS3Namespace)"
          }, {
              "ParameterKey": "$(LansaMSIKey)",   
              "ParameterValue": "$(msiURLLatest)"
          }, {
              "ParameterKey": "CurrentVPC",   
              "ParameterValue": "$(CurrentVPC)"
          }, {
              "ParameterKey": "AvailabilityZones",   
              "ParameterValue": "$(AvailabilityZones)"
          }, {
              "ParameterKey": "NumberOfAZs",   
              "ParameterValue": "$(NumberOfAZs)"
          }, {
              "ParameterKey": "DBSubnetGroupName",   
              "ParameterValue": "$(DBSubnetGroupName)"
          }, {
              "ParameterKey": "ELBSubnetIds",   
              "ParameterValue": "$(ELBSubnetIds)"
          }, {
              "ParameterKey": "03DBUsername",   
              "ParameterValue": "$(03DBUsername)"
          }
          ]
          onFailure: 'DO_NOTHING'
          disableRollback: true
          outputVariable: deploymentOutput
          captureStackOutputs: asJSON
          captureAsSecuredVars: false
          timeoutInMins: 120
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Print Deployment Output'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/PrintDeploymentOutput.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
          condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
          ignoreLASTEXITCODE: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240

  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-BaseImageName ''$(System.JobDisplayName)'' -stackname ''$(System.StageDisplayName)-$(System.JobDisplayName)'''
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/SetGateVariableCloudAccountId.ps1'

      - pwsh: |
          # Print the Gate variables.
          Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.stack:$(Gate.stack)"| Out-Default
          
          displayName: 'Artifact Check : Output Gate Variable'
          condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete previous Failed Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1

        displayName: 'Deploy AWS template'
        variables:
          TemplateS3Namespace: '/image-cd-pipeline'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          stackName: '$(Gate.stack)'
          templateSource: s3
          s3BucketName: lansa
          s3ObjectKey: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
          templateParametersSource: inline
          templateParameters: |
          [{
              "ParameterKey": "$(DBPasswordKey)",
              "ParameterValue": "$(DBPasswordValue)"
          }, {
              "ParameterKey": "$(WebPasswordKey)",
              "ParameterValue": "$(WebPasswordValue)"
          }, {
              "ParameterKey": "$(KeyNameKey)",    
              "ParameterValue": "$(KeyNameValue)"
          }, {
              "ParameterKey": "$(RemoteAccessLocationKey)",   
              "ParameterValue": "$(RemoteAccessLocationValue)"
          }, {
              "ParameterKey": "ImageSource",   
              "ParameterValue": "Custom"
          }, {
              "ParameterKey": "AMIId",   
              "ParameterValue": "$(Gate.ImageID)"
          }, {
              "ParameterKey": "LansaVersion",   
              "ParameterValue": "$(lansaVersion)"
          },  {
              "ParameterKey": "11WebserverOSVersion",   
              "ParameterValue": "$(WebserverOSLatestVersionValue)"
          }, {
              "ParameterKey": "10LansaGitRepoBranch",   
              "ParameterValue": "$(CookbooksBranch)"
          },  {
              "ParameterKey": "TemplateS3Namespace",   
              "ParameterValue": "$(TemplateS3Namespace)"
          }, {
              "ParameterKey": "$(LansaMSIKey)",   
              "ParameterValue": "$(msiURLLatest)"
          }, {
              "ParameterKey": "CurrentVPC",   
              "ParameterValue": "$(CurrentVPC)"
          }, {
              "ParameterKey": "AvailabilityZones",   
              "ParameterValue": "$(AvailabilityZones)"
          }, {
              "ParameterKey": "NumberOfAZs",   
              "ParameterValue": "$(NumberOfAZs)"
          }, {
              "ParameterKey": "DBSubnetGroupName",   
              "ParameterValue": "$(DBSubnetGroupName)"
          }, {
              "ParameterKey": "ELBSubnetIds",   
              "ParameterValue": "$(ELBSubnetIds)"
          }, {
              "ParameterKey": "03DBUsername",   
              "ParameterValue": "$(03DBUsername)"
          }
          ]
          onFailure: 'DO_NOTHING'
          disableRollback: true
          outputVariable: deploymentOutput
          captureStackOutputs: asJSON
          captureAsSecuredVars: false
          timeoutInMins: 120
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Print Deployment Output'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/PrintDeploymentOutput.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
          condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
          ignoreLASTEXITCODE: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240

  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-BaseImageName ''$(System.JobDisplayName)'' -stackname ''$(System.StageDisplayName)-$(System.JobDisplayName)'''
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/SetGateVariableCloudAccountId.ps1'

      - pwsh: |
        # Print the Gate variables.
        Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.stack:$(Gate.stack)"| Out-Default
        
        displayName: 'Artifact Check : Output Gate Variable'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete previous Failed Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
        displayName: 'Deploy AWS template'
        variables:
          TemplateS3Namespace: '/image-cd-pipeline'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          stackName: '$(Gate.stack)'
          templateSource: s3
          s3BucketName: lansa
          s3ObjectKey: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
          templateParametersSource: inline
          templateParameters: |
          [{
              "ParameterKey": "$(DBPasswordKey)",
              "ParameterValue": "$(DBPasswordValue)"
          }, {
              "ParameterKey": "$(WebPasswordKey)",
              "ParameterValue": "$(WebPasswordValue)"
          }, {
              "ParameterKey": "$(KeyNameKey)",    
              "ParameterValue": "$(KeyNameValue)"
          }, {
              "ParameterKey": "$(RemoteAccessLocationKey)",   
              "ParameterValue": "$(RemoteAccessLocationValue)"
          }, {
              "ParameterKey": "ImageSource",   
              "ParameterValue": "Custom"
          }, {
              "ParameterKey": "AMIId",   
              "ParameterValue": "$(Gate.ImageID)"
          }, {
              "ParameterKey": "LansaVersion",   
              "ParameterValue": "$(lansaVersionPrevious)"
          },  {
              "ParameterKey": "11WebserverOSVersion",   
              "ParameterValue": "$(WebserverOSLatestVersionValue)"
          }, {
              "ParameterKey": "10LansaGitRepoBranch",   
              "ParameterValue": "$(CookbooksBranch)"
          },  {
              "ParameterKey": "TemplateS3Namespace",   
              "ParameterValue": "$(TemplateS3Namespace)"
          }, {
              "ParameterKey": "$(LansaMSIKey)",   
              "ParameterValue": "$(msiURLPrevious)"
          }, {
              "ParameterKey": "CurrentVPC",   
              "ParameterValue": "$(CurrentVPC)"
          }, {
              "ParameterKey": "AvailabilityZones",   
              "ParameterValue": "$(AvailabilityZones)"
          }, {
              "ParameterKey": "NumberOfAZs",   
              "ParameterValue": "$(NumberOfAZs)"
          }, {
              "ParameterKey": "DBSubnetGroupName",   
              "ParameterValue": "$(DBSubnetGroupName)"
          }, {
              "ParameterKey": "ELBSubnetIds",   
              "ParameterValue": "$(ELBSubnetIds)"
          }, {
              "ParameterKey": "03DBUsername",   
              "ParameterValue": "$(03DBUsername)"
          }
          ]
          onFailure: 'DO_NOTHING'
          disableRollback: true
          outputVariable: deploymentOutput
          captureStackOutputs: asJSON
          captureAsSecuredVars: false
          timeoutInMins: 120
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Print Deployment Output'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/PrintDeploymentOutput.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
          ignoreLASTEXITCODE: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240

  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-BaseImageName ''$(System.JobDisplayName)'' -stackname ''$(System.StageDisplayName)-$(System.JobDisplayName)'''
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/SetGateVariableCloudAccountId.ps1'

      - pwsh: |
        # Print the Gate variables.
        Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.stack:$(Gate.stack)"| Out-Default
        
        displayName: 'Artifact Check : Output Gate Variable'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete previous Failed Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
        displayName: 'Deploy AWS template'
        variables:
          TemplateS3Namespace: '/image-cd-pipeline'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          stackName: '$(Gate.stack)'
          templateSource: s3
          s3BucketName: lansa
          s3ObjectKey: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
          templateParametersSource: inline
          templateParameters: |
          [{
              "ParameterKey": "$(DBPasswordKey)",
              "ParameterValue": "$(DBPasswordValue)"
          }, {
              "ParameterKey": "$(WebPasswordKey)",
              "ParameterValue": "$(WebPasswordValue)"
          }, {
              "ParameterKey": "$(KeyNameKey)",    
              "ParameterValue": "$(KeyNameValue)"
          }, {
              "ParameterKey": "$(RemoteAccessLocationKey)",   
              "ParameterValue": "$(RemoteAccessLocationValue)"
          }, {
              "ParameterKey": "ImageSource",   
              "ParameterValue": "Custom"
          }, {
              "ParameterKey": "AMIId",   
              "ParameterValue": "$(Gate.ImageID)"
          }, {
              "ParameterKey": "LansaVersion",   
              "ParameterValue": "$(lansaVersion)"
          },  {
              "ParameterKey": "11WebserverOSVersion",   
              "ParameterValue": "$(WebserverOSLatestVersionValue)"
          }, {
              "ParameterKey": "10LansaGitRepoBranch",   
              "ParameterValue": "$(CookbooksBranch)"
          },  {
              "ParameterKey": "TemplateS3Namespace",   
              "ParameterValue": "$(TemplateS3Namespace)"
          }, {
              "ParameterKey": "$(LansaMSIKey)",   
              "ParameterValue": "$(msiURLLatest)"
          }, {
              "ParameterKey": "CurrentVPC",   
              "ParameterValue": "$(CurrentVPC)"
          }, {
              "ParameterKey": "AvailabilityZones",   
              "ParameterValue": "$(AvailabilityZones)"
          }, {
              "ParameterKey": "NumberOfAZs",   
              "ParameterValue": "$(NumberOfAZs)"
          }, {
              "ParameterKey": "DBSubnetGroupName",   
              "ParameterValue": "$(DBSubnetGroupName)"
          }, {
              "ParameterKey": "ELBSubnetIds",   
              "ParameterValue": "$(ELBSubnetIds)"
          }, {
              "ParameterKey": "03DBUsername",   
              "ParameterValue": "$(03DBUsername)"
          }
          ]
          onFailure: 'DO_NOTHING'
          disableRollback: true
          outputVariable: deploymentOutput
          captureStackOutputs: asJSON
          captureAsSecuredVars: false
          timeoutInMins: 120
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Print Deployment Output'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/PrintDeploymentOutput.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
          ignoreLASTEXITCODE: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240

  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-BaseImageName ''$(System.JobDisplayName)'' -stackname ''$(System.StageDisplayName)-$(System.JobDisplayName)'''
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/SetGateVariableCloudAccountId.ps1'

      - pwsh: |
        # Print the Gate variables.
        Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.stack:$(Gate.stack)"| Out-Default
        
        displayName: 'Artifact Check : Output Gate Variable'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete previous Failed Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
        displayName: 'Deploy AWS template'
        variables:
          TemplateS3Namespace: '/image-cd-pipeline'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          stackName: '$(Gate.stack)'
          templateSource: s3
          s3BucketName: lansa
          s3ObjectKey: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
          templateParametersSource: inline
          templateParameters: |
          [{
              "ParameterKey": "$(DBPasswordKey)",
              "ParameterValue": "$(DBPasswordValue)"
          }, {
              "ParameterKey": "$(WebPasswordKey)",
              "ParameterValue": "$(WebPasswordValue)"
          }, {
              "ParameterKey": "$(KeyNameKey)",    
              "ParameterValue": "$(KeyNameValue)"
          }, {
              "ParameterKey": "$(RemoteAccessLocationKey)",   
              "ParameterValue": "$(RemoteAccessLocationValue)"
          }, {
              "ParameterKey": "ImageSource",   
              "ParameterValue": "Custom"
          }, {
              "ParameterKey": "AMIId",   
              "ParameterValue": "$(Gate.ImageID)"
          }, {
              "ParameterKey": "LansaVersion",   
              "ParameterValue": "$(lansaVersion)"
          },  {
              "ParameterKey": "11WebserverOSVersion",   
              "ParameterValue": "$(WebserverOSLatestVersionValue)"
          }, {
              "ParameterKey": "10LansaGitRepoBranch",   
              "ParameterValue": "$(CookbooksBranch)"
          },  {
              "ParameterKey": "TemplateS3Namespace",   
              "ParameterValue": "$(TemplateS3Namespace)"
          }, {
              "ParameterKey": "$(LansaMSIKey)",   
              "ParameterValue": "$(msiURLLatest)"
          }, {
              "ParameterKey": "CurrentVPC",   
              "ParameterValue": "$(CurrentVPC)"
          }, {
              "ParameterKey": "AvailabilityZones",   
              "ParameterValue": "$(AvailabilityZones)"
          }, {
              "ParameterKey": "NumberOfAZs",   
              "ParameterValue": "$(NumberOfAZs)"
          }, {
              "ParameterKey": "DBSubnetGroupName",   
              "ParameterValue": "$(DBSubnetGroupName)"
          }, {
              "ParameterKey": "ELBSubnetIds",   
              "ParameterValue": "$(ELBSubnetIds)"
          }, {
              "ParameterKey": "03DBUsername",   
              "ParameterValue": "$(03DBUsername)"
          }
          ]
          onFailure: 'DO_NOTHING'
          disableRollback: true
          outputVariable: deploymentOutput
          captureStackOutputs: asJSON
          captureAsSecuredVars: false
          timeoutInMins: 120
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Print Deployment Output'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/PrintDeploymentOutput.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
          ignoreLASTEXITCODE: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240
  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-BaseImageName ''$(System.JobDisplayName)'' -stackname ''$(System.StageDisplayName)-$(System.JobDisplayName)'''
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/SetGateVariableCloudAccountId.ps1'

      - pwsh: |
        # Print the Gate variables.
        Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.stack:$(Gate.stack)"| Out-Default
        
        displayName: 'Artifact Check : Output Gate Variable'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete previous Failed Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
        displayName: 'Deploy AWS template'
        variables:
          TemplateS3Namespace: '/image-cd-pipeline'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          stackName: '$(Gate.stack)'
          templateSource: s3
          s3BucketName: lansa
          s3ObjectKey: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
          templateParametersSource: inline
          templateParameters: |
          [{
              "ParameterKey": "$(DBPasswordKey)",
              "ParameterValue": "$(DBPasswordValue)"
          }, {
              "ParameterKey": "$(WebPasswordKey)",
              "ParameterValue": "$(WebPasswordValue)"
          }, {
              "ParameterKey": "$(KeyNameKey)",    
              "ParameterValue": "$(KeyNameValue)"
          }, {
              "ParameterKey": "$(RemoteAccessLocationKey)",   
              "ParameterValue": "$(RemoteAccessLocationValue)"
          }, {
              "ParameterKey": "ImageSource",   
              "ParameterValue": "Custom"
          }, {
              "ParameterKey": "AMIId",   
              "ParameterValue": "$(Gate.ImageID)"
          }, {
              "ParameterKey": "LansaVersion",   
              "ParameterValue": "$(lansaVersionPrevious)"
          },  {
              "ParameterKey": "11WebserverOSVersion",   
              "ParameterValue": "$(WebserverOSLatestVersionValue)"
          }, {
              "ParameterKey": "10LansaGitRepoBranch",   
              "ParameterValue": "$(CookbooksBranch)"
          },  {
              "ParameterKey": "TemplateS3Namespace",   
              "ParameterValue": "$(TemplateS3Namespace)"
          }, {
              "ParameterKey": "$(LansaMSIKey)",   
              "ParameterValue": "$(msiURLPrevious)"
          }, {
              "ParameterKey": "CurrentVPC",   
              "ParameterValue": "$(CurrentVPC)"
          }, {
              "ParameterKey": "AvailabilityZones",   
              "ParameterValue": "$(AvailabilityZones)"
          }, {
              "ParameterKey": "NumberOfAZs",   
              "ParameterValue": "$(NumberOfAZs)"
          }, {
              "ParameterKey": "DBSubnetGroupName",   
              "ParameterValue": "$(DBSubnetGroupName)"
          }, {
              "ParameterKey": "ELBSubnetIds",   
              "ParameterValue": "$(ELBSubnetIds)"
          }, {
              "ParameterKey": "03DBUsername",   
              "ParameterValue": "$(03DBUsername)"
          }
          ]
          onFailure: 'DO_NOTHING'
          disableRollback: true
          outputVariable: deploymentOutput
          captureStackOutputs: asJSON
          captureAsSecuredVars: false
          timeoutInMins: 120
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Print Deployment Output'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/PrintDeploymentOutput.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
          ignoreLASTEXITCODE: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240

  - stage: ${{ parameters.stageName }}
    dependsOn: ${{ parameters.dependsOn }}
    displayName: ${{ parameters.stageDisplayname }}
    jobs:
    - job: ${{ parameters.jobName }}
      displayName: ${{ parameters.jobDisplayname }} 
      pool: 
        vmImage: ${{ parameters.vmImage }}

      steps:
      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Artifact Check : Set Gate Variable'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-BaseImageName ''$(System.JobDisplayName)'' -stackname ''$(System.StageDisplayName)-$(System.JobDisplayName)'''
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/SetGateVariableCloudAccountId.ps1'

      - pwsh: |
        # Print the Gate variables.
        Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.stack:$(Gate.stack)"| Out-Default
        
        displayName: 'Artifact Check : Output Gate Variable'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete previous Failed Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.CloudFormationCreateOrUpdateStack.CloudFormationCreateOrUpdateStack@1
        displayName: 'Deploy AWS template'
        variables:
          TemplateS3Namespace: '/image-cd-pipeline'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          stackName: '$(Gate.stack)'
          templateSource: s3
          s3BucketName: lansa
          s3ObjectKey: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
          templateParametersSource: inline
          templateParameters: |
          [{
              "ParameterKey": "$(DBPasswordKey)",
              "ParameterValue": "$(DBPasswordValue)"
          }, {
              "ParameterKey": "$(WebPasswordKey)",
              "ParameterValue": "$(WebPasswordValue)"
          }, {
              "ParameterKey": "$(KeyNameKey)",    
              "ParameterValue": "$(KeyNameValue)"
          }, {
              "ParameterKey": "$(RemoteAccessLocationKey)",   
              "ParameterValue": "$(RemoteAccessLocationValue)"
          }, {
              "ParameterKey": "ImageSource",   
              "ParameterValue": "Custom"
          }, {
              "ParameterKey": "AMIId",   
              "ParameterValue": "$(Gate.ImageID)"
          }, {
              "ParameterKey": "LansaVersion",   
              "ParameterValue": "$(lansaVersion)"
          },  {
              "ParameterKey": "11WebserverOSVersion",   
              "ParameterValue": "$(WebserverOSLatestVersionValue)"
          }, {
              "ParameterKey": "10LansaGitRepoBranch",   
              "ParameterValue": "$(CookbooksBranch)"
          },  {
              "ParameterKey": "TemplateS3Namespace",   
              "ParameterValue": "$(TemplateS3Namespace)"
          }, {
              "ParameterKey": "$(LansaMSIKey)",   
              "ParameterValue": "$(msiURLLatest)"
          }, {
              "ParameterKey": "CurrentVPC",   
              "ParameterValue": "$(CurrentVPC)"
          }, {
              "ParameterKey": "AvailabilityZones",   
              "ParameterValue": "$(AvailabilityZones)"
          }, {
              "ParameterKey": "NumberOfAZs",   
              "ParameterValue": "$(NumberOfAZs)"
          }, {
              "ParameterKey": "DBSubnetGroupName",   
              "ParameterValue": "$(DBSubnetGroupName)"
          }, {
              "ParameterKey": "ELBSubnetIds",   
              "ParameterValue": "$(ELBSubnetIds)"
          }, {
              "ParameterKey": "03DBUsername",   
              "ParameterValue": "$(03DBUsername)"
          }
          ]
          onFailure: 'DO_NOTHING'
          disableRollback: true
          outputVariable: deploymentOutput
          captureStackOutputs: asJSON
          captureAsSecuredVars: false
          timeoutInMins: 120
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Print Deployment Output'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/PrintDeploymentOutput.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Test CFN Deployment: URL tests'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/TestCFNDeployment.ps1'
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))

      - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
        displayName: 'Delete Stack'
        inputs:
          awsCredentials: AzureDevOps
          regionName: 'ap-southeast-2'
          arguments: '-Gatestack $(Gate.stack)'
          filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeletePreviousFailedStack.ps1'
          ignoreLASTEXITCODE: true
        condition: and(succeeded(), eq(variables['Gate.IsEnabled'], 'True'))
        timeoutInMinutes: 240
